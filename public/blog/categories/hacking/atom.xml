<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hacking | Agocs]]></title>
  <link href="http://agocs.org/blog/categories/hacking/atom.xml" rel="self"/>
  <link href="http://agocs.org/"/>
  <updated>2015-09-04T14:23:33-05:00</updated>
  <id>http://agocs.org/</id>
  <author>
    <name><![CDATA[Christopher Agocs]]></name>
    <email><![CDATA[chris@agocs.org]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Internet Jukebox]]></title>
    <link href="http://agocs.org/blog/2015/07/30/internet-jukebox/"/>
    <updated>2015-07-30T10:40:50-05:00</updated>
    <id>http://agocs.org/blog/2015/07/30/internet-jukebox</id>
    <content type="html"><![CDATA[<p>One of the hackerspaces at which I am a member installed a Beaglebone Black on their door and put a speaker outside.</p>

<p><a href="http://imgur.com/v3esU7N"><img src="http://i.imgur.com/v3esU7Nl.jpg" title="source: imgur.com" /></a><a href="http://imgur.com/Pyb5A9A"><img src="http://i.imgur.com/Pyb5A9Al.jpg" title="source: imgur.com" /></a></p>

<p>Now we can play sounds to the street, but to do so, you have to ssh into the Beaglebone. That&rsquo;s not bad, but it&rsquo;s a hassle. Okay, so can I make a REST endpoint that plays music?</p>

<p>(The answer is yes.)</p>

<p>Here&rsquo;s the <a href="https://github.com/agocs/bbb_sound_server">repo</a>. Let&rsquo;s go through it.</p>

<h2>Structure</h2>

<p>There are two endpoints, <code>/</code> and <code>/play/</code>. <code>/</code> returns a simple HTML form that lets the user upload a sound file. When the user clicks <code>Submit</code>, a <code>POST</code> request is made to <code>/play/</code>. The sound file is extracted from the form data, and asynchronously processed.</p>

<p>The sound file process is thus: it is saved to a temporary file on disk, <code>mplayer</code> is called on that file, and then when that process terminates, the sound file is removed.</p>

<h3>Serving a static html page</h3>

<p>is easy.</p>

<pre><code>controlfs := http.FileServer(http.Dir("control"))
http.Handle("/", controlfs)
</code></pre>

<p>There&rsquo;s a directory called <code>control</code>, and it contains <code>index.html</code>. When you hit <code>/</code>, you get index.html. Wildly easy.</p>

<h3>Creating that REST endpoint</h3>

<pre><code>http.HandleFunc("/play/", func(w http.ResponseWriter, req *http.Request) {
    if req.Method == "POST" {

        if req.ContentLength &gt; 10485760 {
            w.WriteHeader(http.StatusBadRequest)
            w.Write([]byte("File size capped at 10mb"))
            return
        }

        soundFile, headers, err := req.FormFile("soundFile")
        if err != nil {
            log.Printf("Error getting soundFile from Form. \n %s", err.Error())
            w.WriteHeader(http.StatusServiceUnavailable)
            return
        }
        log.Printf("Recieved %s", headers.Filename)
        w.Write([]byte("All done!"))
        go playASound(soundFile)

    } else {
        w.WriteHeader(http.StatusMethodNotAllowed)

        //TODO(cagocs): maybe return 200 with the name of the sound playing?
    }
})
</code></pre>

<p>Briefly, here&rsquo;s what we&rsquo;re doing:</p>

<ul>
<li>Setting up a url pattern, <code>/play</code>/.</li>
<li>Defining an anonymous function that runs when you hit <code>/play</code>/</li>
<li>Checking the request method.

<ul>
<li>if it&rsquo;s <code>POST</code>

<ul>
<li>Check the content-length. If it&rsquo;s greater than 10 MiB, return a status code 400.</li>
<li>Get the <code>soundFile</code> out of the form.</li>
<li>Log the filename</li>
<li>Return a status code 200</li>
<li>Asynchronously play the file</li>
</ul>
</li>
<li>if it isn&rsquo;t

<ul>
<li>Return a status code 405</li>
<li>I considered returning a string representation of all the files playing, but didn&rsquo;t.</li>
</ul>
</li>
</ul>
</li>
</ul>


<p><em>One quick point:</em> Yes, it&rsquo;s possible to spoof the content-length in a request. I didn&rsquo;t check for that. If you decide to run this in any sort of mission critical sense, maybe watch out for that.</p>

<h3>Playing a sound</h3>

<p>func playASound(file multipart.File) {</p>

<pre><code>    soundFile, err0 := ioutil.TempFile("", "sound_")
    if err0 != nil {
        log.Printf("Error initializing new file")
    }

    buffer, err1 := ioutil.ReadAll(file)
    if err1 != nil {
        log.Printf("Error reading mime multipart file")
    }

    err2 := ioutil.WriteFile(soundFile.Name(), buffer, os.ModeTemporary)
    if err2 != nil {
        log.Printf("Error writing file to disk")
    }

    cmd := exec.Command("mplayer", soundFile.Name())

    err3 := cmd.Run()
    if err3 != nil {
        log.Printf("Error playing file %s", soundFile.Name())
    }

    soundFile.Close()
    err4 := os.Remove(soundFile.Name())
    if err4 != nil {
        log.Println("Error deleting %s", soundFile.Name())
    }

}
</code></pre>

<p>So now we have a sound file in memory. How do we get it to the speakers? I spent a long time screwing around trying to figure out a &ldquo;pure Go&rdquo; solution, gave up, and decided to cheat. The Beaglebone Black will probably ship with <a href="https://en.wikipedia.org/wiki/MPlayer">MPlayer</a>; why not use that?</p>

<p>I skimmed through some code examples and came up with the solution above. <code>playASound</code> is running asynchronously, so it can spend some time doing what it needs to do. It creates a new <code>TempFile</code>, and writes the sound file there. It then creates a <code>Command</code> that calls <code>mplayer</code> and passes the name of the temporary file to <code>mplayer</code> as an argument. <code>Mplayer</code> plays the file, and when the <code>mplayer</code> process completes, our goroutine closes and removes the temporary file.</p>

<h2>Running</h2>

<p>I decided to not take my own advice and open this up to the general internet a few days ago. I used port forwarding on my router to forward :3030 on my external IP address to port :3030 on my laptop, and ran the program. I posted about it on IRC, forums, and made an Imgur post, and I got a few people participating.</p>

<p>I found it to be incredibly stable. No crashing, no issues running 4 to 6 instances of mplayer on top of one another. I was pleased with how the server handled unexpected EOFs and connection timeouts. Lastly, I discovered that letting people assault my ears with a barrage of mp3s is fun!</p>
]]></content>
  </entry>
  
</feed>
